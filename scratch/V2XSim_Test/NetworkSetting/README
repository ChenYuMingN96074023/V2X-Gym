<ConfigType>
    <Name InstanceType="InstanceType" arguments="arguments" assign="assign" AssignArgs="AssignArgs" AssignSubtype="AssignSubtype" AssignSubtypeArgs="AssignSubtypeArgs">
        <SubMethod>args</SubMethod> 
    </Name>
</ConfigType>


//name in scripts is memoriable between config files

specialtypes = {CreateObject, Ptr, EpsBearer}

If (InstanceType != specialtype){
    If(assign is pointer){
        C++{ InstanceType Name = assign->AssignSubtype(AssignSubtypeArgs);  name.SubMethod(args);}
    }
    else{
        C++{ InstanceType Name = assign ;  Name.SubMethod(args);} //if no AssignArgs
        C++{ InstanceType Name = assign(AssignArgs) ;  Name.SubMethod(args);} 
        C++{ InstanceType Name = assign.AssignSubtype(AssignSubtypeArgs) ;  Name.SubMethod(args);}
        or
        C++{ InstanceType Name; Name.SubMethod(args);}
        or
        C++{ InstanceType(arguments);}
    }
}
elseif(InstanceType==CreateObject){
    C++{ Ptr<type> Name = CreateObjects<type>(); Name->SubMethod(args);} //no eq, arguments and assign
}
elseif (InstanceType==Ptr){
    C++{ Ptr<type> Name;}
    C++{ Ptr<type> Name = assign(AssignArgs) ;  Name->SubMethod(args);}
    C++{ Ptr<type> Name = assign->AssignSubtype(AssignSubtypeArgs) ;  Name->SubMethod(args);}
}
elseif (InstanceType == EpsBearer ){ //OPTIONAL
    C++{lteHelper->ActivateDedicatedEpsBearer (ueLteDevs, EpsBearer (EpsBearer::NGBR_VIDEO_TCP_DEFAULT);}
}
    



Ptr<NetworkSetting> NetworkSetting = CreateObject<NetworkSetting>();


#define createsubmethod(A, B, C, D, E) A->B(C, D(E))
// if D==double; then call createsubmethod(A, B, C, D, Double, E)

#define configset(A, B, C) config(A, B(C))
//Config("123", double(123)); string a = "123"; createsubmethod(a, double, 123);

NetworkSetting->IncludeConfig("./NetworkConfig.xml"); //parse config into 
RegistMehod(LteHelper, NetworkSetting ); //the helper instance must be create before registrate; search helper from config setting, then call maceo createsubmethod
RegistArguments(parameters, type, NetworkSetting); //create map for storing arg type 


Ptr<NetworkSetting> NetworkSetting = CreateObject<NetworkSetting>();
NetworkSetting->IncludeConfig("./NetworkConfig.xml"); //parse config into 



RegistMehod(LteHelper, submethod, Type, NetworkSetting ); //the helper instance must be create before registrate; search helper from config setting, then call maceo createsubmethod
//UintegerValue BooleanValue IntegerValue DoubleValue  StringValue, int, uint string, boolm double
//two arg: second arg type
//one arg: first arg type

RegistMehod(LteHelper, submethod, Type, NetworkSetting );

RegistParameters(parameters, int, NetworkSetting); //double, int, uint, std::string, bool 
SetDefault(Arg1, DoubleValue, NetworkSetting); 

  NetworkSetting* NetSet = new NetworkSetting;
  NetSet->IncludeConfig("./NetworkEnvSetting.xml");
  RegisterParameters(simTime, double, NetSet);
  RegisterParameters(abc, string, NetSet);
  SetDeaultConfig("ns3::LteHelper::NumberOfComponentCarriers",UintegerValue,  NetSet);
  Ptr<LteHelper> lteHelper = CreateObject<LteHelper> ();
  RegisterMethod_twoarg(lteHelper, SetAttribute, BooleanValue, NetSet);
  RegisterMethod_noarg(lteHelper, EnableUlRxPhyTraces, NetSet);
  RegisterMethod_onearg(lteHelper, SetFadingModel, string, NetSet);

